import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/location_weather_service.dart';
import '../services/chat_service.dart';
import '../screens/chat_screen.dart';

class WeatherWidget extends StatefulWidget {
  final bool isEnabled;
  final VoidCallback? onTap;

  const WeatherWidget({super.key, required this.isEnabled, this.onTap});

  @override
  State<WeatherWidget> createState() => _WeatherWidgetState();
}

class _WeatherWidgetState extends State<WeatherWidget> {
  bool _isLoading = true;
  Map<String, dynamic>? _weatherData;

  @override
  void initState() {
    super.initState();
    if (widget.isEnabled) {
      _loadWeatherData();
    }
  }

  @override
  void didUpdateWidget(WeatherWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.isEnabled && !oldWidget.isEnabled) {
      _loadWeatherData();
    }
  }

  Future<void> _loadWeatherData() async {
    if (!widget.isEnabled) return;

    setState(() {
      _isLoading = true;
    });

    try {
      print('üå§Ô∏è WeatherWidget: ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë');
      final weatherService = LocationWeatherService();
      final weather = await weatherService.fetchAndSaveLocationWeather();

      print(
        'üå§Ô∏è WeatherWidget: ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å - ${weather != null ? 'ÏÑ±Í≥µ' : 'Ïã§Ìå®'}',
      );
      if (weather != null) {
        print('üå§Ô∏è WeatherWidget: ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ - ${weather.keys.toList()}');
        print('üå§Ô∏è WeatherWidget: Ïò®ÎèÑ - ${weather['main']?['temp']}');
        print(
          'üå§Ô∏è WeatherWidget: ÎÇ†Ïî® ÏÑ§Î™Ö - ${weather['weather']?[0]?['description']}',
        );
      }

      if (mounted) {
        setState(() {
          _weatherData = weather;
          _isLoading = false;
        });
      }
    } catch (e) {
      print('‚ùå WeatherWidget: ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå® - $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  // ÎÇ†Ïî® ÏÉÅÌÉúÏóê Îî∞Î•∏ ÏïÑÏù¥ÏΩò Î∞òÌôò
  IconData _getWeatherIcon() {
    if (_weatherData == null) return Icons.wb_sunny;

    final condition =
        (_weatherData!['weather']?[0]?['description'] as String?) ?? '';
    final temp = (_weatherData!['main']?['temp'] as num?)?.toDouble() ?? 0;

    // ÎÇ†Ïî® ÏÉÅÌÉúÎ≥Ñ ÏïÑÏù¥ÏΩò
    if (condition.contains('ÎπÑ') ||
        condition.contains('Rain') ||
        condition.contains('drizzle')) {
      return Icons.water_drop;
    } else if (condition.contains('Îàà') || condition.contains('Snow')) {
      return Icons.ac_unit;
    } else if (condition.contains('ÌùêÎ¶º') ||
        condition.contains('Cloud') ||
        condition.contains('cloudy')) {
      return Icons.cloud;
    } else if (condition.contains('ÏïàÍ∞ú') ||
        condition.contains('fog') ||
        condition.contains('mist')) {
      return Icons.cloud;
    } else if (condition.contains('ÎßëÏùå') ||
        condition.contains('Clear') ||
        condition.contains('sunny')) {
      return Icons.wb_sunny;
    } else if (condition.contains('Ï≤úÎë•') ||
        condition.contains('thunder') ||
        condition.contains('storm')) {
      return Icons.thunderstorm;
    } else if (temp > 30) {
      return Icons.wb_sunny;
    } else if (temp < 5) {
      return Icons.ac_unit;
    } else {
      return Icons.wb_sunny;
    }
  }

  // ÎÇ†Ïî® ÏÉÅÌÉúÏóê Îî∞Î•∏ Ï†úÎ™© Î∞òÌôò
  String _getWeatherTitle() {
    if (_weatherData == null) return 'Ïò§ÎäòÏùò ÎÇ†Ïî®';

    final condition =
        (_weatherData!['weather']?[0]?['description'] as String?) ?? '';
    final temp = (_weatherData!['main']?['temp'] as num?)?.toDouble() ?? 0;

    // Ïã§Ï†ú Î∞õÏïÑÏò® ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Ï†úÎ™©Ïóê ÌëúÏãú
    if (condition.isNotEmpty) {
      return condition; // Ïòà: "ÎßëÏùå", "ÌùêÎ¶º", "ÎπÑ", "Îàà" Îì±
    } else {
      // ÎÇ†Ïî® Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Ïò®ÎèÑ Í∏∞Î∞òÏúºÎ°ú ÌëúÏãú
      if (temp > 30) {
        return 'ÎçîÏö¥ ÎÇ†';
      } else if (temp < 5) {
        return 'Ï∂îÏö¥ ÎÇ†';
      } else {
        return 'Ï¢ãÏùÄ ÎÇ†Ïî®';
      }
    }
  }

  String _getWeatherAdvice() {
    if (_weatherData == null) return 'ÎÇ†Ïî® Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî';

    // OpenWeatherMap API ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏàòÏ†ï
    final temp = (_weatherData!['main']?['temp'] as num?)?.toDouble() ?? 0;
    final condition =
        (_weatherData!['weather']?[0]?['description'] as String?) ?? '';

    // Ïò®ÎèÑ Í∏∞Î∞ò Í∏∞Î≥∏ Ï°∞Ïñ∏
    String advice = '';
    if (temp < 5) {
      advice = 'Îî∞ÎúªÌïú Ïò∑ÏùÑ ÏûÖÍ≥† Ïô∏Ï∂úÌïòÏÑ∏Ïöî';
    } else if (temp < 15) {
      advice = 'Í∞ÄÎ≤ºÏö¥ Í≤âÏò∑ÏùÑ Ï±ôÍ∏∞ÏÑ∏Ïöî';
    } else if (temp < 25) {
      advice = 'ÎÇ†Ïî®Í∞Ä Ï¢ãÏäµÎãàÎã§. ÏïºÏô∏ ÌôúÎèôÌïòÍ∏∞ Ï¢ãÏïÑÏöî';
    } else {
      advice = 'ÎçîÏö¥ ÎÇ†Ïî®ÏûÖÎãàÎã§. ÏãúÏõêÌïú Í≥≥ÏóêÏÑú Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏÑ∏Ïöî';
    }

    // ÎÇ†Ïî® ÏÉÅÌÉúÎ≥Ñ Ï∂îÍ∞Ä Ï°∞Ïñ∏
    if (condition.contains('ÎπÑ') || condition.contains('Rain')) {
      advice += ' Ïö∞ÏÇ∞ÏùÑ Ï±ôÍ∏∞ÏÑ∏Ïöî!';
    } else if (condition.contains('Îàà') || condition.contains('Snow')) {
      advice += ' ÎØ∏ÎÅÑÎü¨ÏßÄÏßÄ ÏïäÍ≤å Ï°∞Ïã¨ÌïòÏÑ∏Ïöî!';
    } else if (condition.contains('ÌùêÎ¶º') || condition.contains('Cloud')) {
      advice += ' Í∞ëÏûêÍ∏∞ ÎπÑÍ∞Ä Ïò¨ Ïàò ÏûàÏñ¥Ïöî.';
    } else if (condition.contains('ÎßëÏùå') || condition.contains('Clear')) {
      advice += ' ÌñáÎ≥ïÏù¥ Í∞ïÌï† Ïàò ÏûàÏñ¥Ïöî.';
    }

    return advice;
  }

  // Ï±ÑÌåÖ ÌôîÎ©¥ ÌëúÏãú
  void _showChatScreen() {
    // ChatProvider Ï¥àÍ∏∞Ìôî
    final chatProvider = Provider.of<ChatProvider>(context, listen: false);
    chatProvider.clearMessages();
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        minChildSize: 0.5,
        maxChildSize: 0.95,
        builder: (context, scrollController) => Container(
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
          ),
          child: Column(
            children: [
              // ÎìúÎûòÍ∑∏ Ìï∏Îì§
              Container(
                margin: const EdgeInsets.only(top: 8),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: Colors.grey.shade300,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              // Ìó§Îçî
              Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  children: [
                    const Icon(
                      Icons.wb_sunny,
                      color: Colors.orange,
                      size: 24,
                    ),
                    const SizedBox(width: 8),
                    const Text(
                      'ÎÇ†Ïî® AI ÎπÑÏÑú',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      onPressed: () => Navigator.of(context).pop(),
                      icon: const Icon(Icons.close),
                    ),
                  ],
                ),
              ),
              const Divider(),
              // AI Ï±ÑÌåÖ ÌôîÎ©¥
              Expanded(
                child: ChatScreen(
                  initialEvent: null,
                  initialTopic: 'ÎÇ†Ïî®',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (!widget.isEnabled) {
      return const SizedBox.shrink();
    }

    return GestureDetector(
      onTap: _showChatScreen,
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 14, vertical: 7),
        padding: const EdgeInsets.all(14),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.orange.shade300, Colors.orange.shade500],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.orange.withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(_getWeatherIcon(), color: Colors.white, size: 22),
                const SizedBox(width: 8),
                Text(
                  _getWeatherTitle(),
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  '${(_weatherData?['main']?['temp'] as num?)?.toStringAsFixed(1) ?? 'N/A'}¬∞C',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                if (_isLoading)
                  const SizedBox(
                    width: 16,
                    height: 16,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    ),
                  )
                else
                  IconButton(
                    icon: const Icon(
                      Icons.refresh,
                      color: Colors.white,
                      size: 18,
                    ),
                    onPressed: _loadWeatherData,
                    tooltip: 'ÎÇ†Ïî® ÏÉàÎ°úÍ≥†Ïπ®',
                  ),
              ],
            ),
            const SizedBox(height: 7),
            Text(
              _getWeatherAdvice(),
              style: const TextStyle(color: Colors.white, fontSize: 14),
            ),
          ],
        ),
      ),
    );
  }
}
